grammar ReguExpression
  rule regex
    union <UnionNodeM> / concat <ConcatNodeM>
  end

  rule union
    (first_element:(concat) rest_elements:('|' concat)+) <UnionNodeM>
  end

  rule concat
    (repetitions / paren <ParenNodeM>)* <ConcatNodeM>
  end
  
  rule repetitions
    star             <StarNodeM>        /
    plus             <PlusNodeM>        /
    repetition_fixed <RepeatNodeM>      /
    repetition_range <RepeatRangeNodeM> /
    optional         <OptionalNodeM>    /
    char             <CharNodeM>
  end

  rule star
    (repeatable '*') <StarNodeM>
  end
  
  rule plus
    (repeatable '+') <PlusNodeM>
  end
  
  rule repetition_fixed
    (repeatable '{' reps:([0-9]+) '}') <RepeatNodeM>
  end
  
  rule repetition_range
    (repeatable '{' low:([0-9]+) ',' high:([0-9]+) '}') <RepeatRangeNodeM>
  end
  
  rule optional
    (repeatable '?') <OptionalNodeM>
  end
  
  rule repeatable
    char <CharNodeM> / paren <ParenNodeM>
  end
  
  rule char
    escape_char /
    normal_char /
    char_class
  end

  rule escape_char
    '\\' .
  end

  rule normal_char
    [^|+()*\[\]\{\}]
  end
  
  rule char_class
    ('[' ( ('\\' ']') / [^\]] )+ ']')
  end

  rule paren
    ('(' regex ')') <ParenNodeM>
  end
end
